#include "Solution.h"

Solution::Solution(){
	costSol = 0;
	cout << " new sol" << endl;
}

vector<Graph *> Solution::getSol() {
	return sol;
}

Solution::Solution(const Solution& s) {

	for (int i = 0; i < s.sol.size(); i++) {
		Graph * g = new Graph(*s.sol[i]);
		addGraph(g);
	}
	costSol = s.costSol;
}

/*Solution::~Solution() {
/*	for (int i = 0; i < sol.size(); i++) {
		cout << "i = " << i << endl;
		sol[i]->~Graph();
	}*/
//		cout << "hey" << endl;
//}*/


float Solution::getCostSol() {
	return costSol;
}


int Solution::colors() {
	return sol.size();
}

// PROBLEM
float Solution::cost() {
	float toReturn = 0;
	for (int i = 0; i < sol.size(); i++) {
		//cout << sol[i]->getSize() << endl;
		toReturn += sol[i]->getSize() * (i+1);
	}
	return toReturn;
}

float Solution::updateCost(int indexA, int indexB) {

	return costSol - indexA + indexB;

}

void Solution::addGraph(Graph * g) {
	sol.push_back(g);
}

void Solution::removeGraph(int g) {
	sol.erase(sol.begin()+g);
}

// CHECK
void Solution::initialisation(Graph g) {
	cout << "init" << endl;
	for (int i = 0; i < g.getSize(); i++) {

		Graph* tempGraph = new Graph();
		tempGraph->addVertex(g.getGraph()[i]);
		addGraph(tempGraph);
	}
	costSol = cost();
}

//TODO: test
// used to know if a vertex (num) is into sol
bool Solution::isInto(int num) {
	for (int i = 0; i < sol.size(); i++) {
		for (int j = 0; j < sol[i]->getSize(); j++) {
			//cout << "isInto num tested : " << num << endl;
			if (sol[i]->getGraph()[j]->getNum() == num) {
				return true;
			}
		}
	}
	return false;
}

// used to know if all vertices are in Solution and for the cardinality 
bool Solution::solutionOk(Graph g) {
	for (int i = 0; i < g.getSize(); i++) {
		if (!isInto(g.getGraph()[i]->getNum())){
			cerr << "F1: missing Node(s) : " << g.getGraph()[i]->getNum() <<endl;
			return false;
		}
	}
	for (int i = 0; i < sol.size() - 1 ; i++) {
		for (int j = i+1; j < sol.size() ; j++ ) {
			if (sol[i]->getSize() < sol[j]->getSize()) {
				cout << "F2: cardinality not respected" <<endl;
				return false;
			}
		}
	}
	cout << "TRUE" <<endl;
	return true;
}

bool Solution::testGraphsValidity() {
	for (int i = 0; i < sol.size(); i++) {
		for (int j = 0; j < sol[i]->getGraph().size(); j++) {
			for (int k = 0; k < sol[i]->getGraph().size(); k++) {
				if ( sol[i]->getGraph()[j]->isLinked(sol[i]->getGraph()[k]->getNum()) && (j != k)) {
					cout << "TEST FALSE" << endl;
					cout << sol[i]->getGraph()[k]->getNum() << " and " << sol[i]->getGraph()[j]->getNum() << endl;
					return false;
				}
			}
		}
	}
	cout << "TEST TRUE" << endl;
	return true;
}

void Solution::swapGraph(int index1, int index2) {
	Graph * g = new Graph(*sol[index1]);

	Graph * g2 = new Graph(*sol[index2]);
	sol[index1] = new Graph(*g2);

	sol[index2] = new Graph(*g);

}

void Solution::setCostSol(float c) {
	costSol = c;
}

int Solution::moveVertex(int numVertex) {

	// remove from appropriate graph a
	//bool betterCost = false;
	int indexa = indexGraph(numVertex);
	int indexb = -1;

	float newCost = 0;
	//cout << "index a" << indexa << endl;
	int tempIndex = sol[indexa]->getIndexVertex(numVertex);
	Vertex * toMove = new Vertex(*sol[indexa]->getGraph()[tempIndex]);
		//cout << toMove->getNum() << " = tomove " << endl;
	// remove
		/*cout << "verif sizes :" << endl;
		cout << sol[indexa]->getSize() << endl;*/
/*	cout << "A res is into 1 : " << isInto(1) << endl;
	cout << "index graph(1)" << indexGraph(1) << endl;
	cout << " temp index : " << tempIndex << endl;
	cout << "num to Move : " << toMove->getNum() << endl;*/
//	cout << "1 -size indexa : " << sol[indexa]->getSize() << endl;
	sol[indexa]->removeVertex(numVertex);
//	cout << "2- size indexa : " << sol[indexa]->getSize() << endl;

/*	for (int i = 0 ; i < sol[indexa]->getSize(); i++) {
		cout << "  " << sol[indexa]->getGraph()[i]->getNum()<< endl;
	}*/
	//iterative verification - find a correct graph b
	for (int i = 0; i < sol.size(); i++) {
		/*if (sol[i]->canBeAdded(numVertex) && i!=indexa) {
			indexb = i;
			break;
		}*/
		if (sol[i]->canBeAdded(*toMove) && sol[i]->canBeAdded(numVertex)  && i!=indexa) {
			indexb = i;
			break;
		}
	}
	if (indexb == -1) {
		//cout << " WARNING : CHECK moveVertex method into Solution class" << endl;
		sol[indexa]->addVertex(toMove);
		return 0;
	}

//	cout << "graph a : " << indexa << endl;
//	cout << "graph b : " << indexb << endl;
/*	cout << "index graph(1)" << indexGraph(1) << endl;
	cout << "A2 res is into 1 : " << isInto(1) << endl;*/
	// add into another graph b

		//
	//HERE : CHECK COST
	//

	//newCost = updateCost(indexa, indexb);

	if (indexa < indexb) {
		//TODO : restore old Sol
		sol[indexa]->addVertex(toMove);
		return -1;
	}

	sol[indexb]->addVertex(toMove);

	costSol = newCost;
	//sol[indexb]->printGraph();
	// if graph a size = 0, remove it
	if (sol[indexa]->getSize() == 0) {
	//	cout << "REMOVE" << endl;
		removeGraph(indexa);
	}

	// verif of graph a size (same as below)	
	// verification of graph b size compare to his neighbors -> if not ok, find the right index and swap
	if (!rightPlace(indexb) || !rightPlace(indexa)) {
		order();
	}

	costSol = cost();

	//cout << newCost << " vs " << cost() << endl;
	return 1;
}

int Solution::indexGraph(int numVertex) {
	int index = -1;
	for (int i = 0 ; i < sol.size(); i++) {
		if (sol[i]->vertexIsInto(numVertex)) {
			return i;
		}
	}
	return index;
}

bool Solution::rightPlace(int index) {
	if(index == 0) {
		if(sol[index]->getSize() >= sol[index + 1]->getSize() ) {
			return true;
		}
	}
	else if (index == sol.size() - 1) {
		if (sol[index]->getSize()  <= sol[index-1]->getSize() ) {
			return true;
		}
	}
	else {
		if (sol[index]->getSize()  <= sol[index-1]->getSize() && sol[index]->getSize()  >= sol[index+1]->getSize() ) {
			return true;
		}
	}
	return false;
}

int Solution::indexPlace(int index) {
	int s = sol[index]->getSize();
	if(index == 0) {
		for (int i = 1; i < sol.size();i++) {
			if ( s >= sol[i]->getSize()) {
				return i;
			}
		}
	}
	else if (index == sol.size() - 1) {
		for (int i = index - 1; i >= 0 ;i--) {
			if ( s >= sol[i]->getSize()) {
				return i;
			}
		}
	}
	else {
		if(s < sol[index + 1]->getSize()) {
			for (int i = index + 1; i < sol.size();i++) {
				if ( s > sol[i]->getSize()) {
					return i;
				}
			}
			return sol.size()-1;
		}
		else if ( s > sol[index - 1]->getSize()) {
			for (int i = index - 1; i >= 0 ;i--) {
				if ( s > sol[i]->getSize()) {
					return i;
				}
			}
			return 0;
		}
	}

	return -1;
}

void Solution::printSizes() {
	for (int i = 0; i < sol.size(); i++) {
		cout << " " << sol[i]->getSize();
	}
	cout << endl;
}

void Solution::order() {
	for (int i = 0; i < sol.size() - 1; i++) {
		for (int j = i+1 ; j < sol.size(); j++) {
			if(sol[i]->getSize() < sol[j]->getSize()) {
				swapGraph(i,j);
			}
		}
	}
}
